* AML Specification

This document serves as an informal specification of AML (A mathematical language). It provides a high-level overview of all syntactic constructs of AML and its supported operations.

AML is an immutable, NULL-less, and dynamically typed programming language for writing concise mathematical expressions with the help of unicode.

Currently AML offers capabilities for:

- Loads of arithmetic operations or mathematical functions
- Set theory
- Logical expressions

** Features

Programs written in AML are evaluated from top to bottom. The last line of a program always returns the result of the whole execution.

*** Comments

Comments are written using a double dash:

#+BEGIN_SRC
-- I am a comment
#+END_SRC

*** Datatypes

AML supports the following datatypes:

#+BEGIN_SRC 
-- numbers
1
1.3
100,000,000.1231

-- booleans
⊥ -- false
⊤ -- true

-- fractions
1/2
123/412

-- sets
{1, 2, 3, 4}
{1, 1/4}
#+END_SRC

*** Expressions

The foundational construct in AML is an expression. There are many different types of operations in AML (a complete list will be shown in the next section) which can be used to build expressions. Here are some examples:

#+BEGIN_SRC
-- Intersect two sets
{1, 2, 3} ∩ {3, 4, 5};

-- Add two fractions
1/2 + 4/3;

-- Predicates
(A ∧ B) ⊕ (C ∨ ¬D);
∀(x ∈ X: x ≥ 10);
#+END_SRC

*** Assignments

With an assignment the result of an expression is stored in a variable. The return value of an assignment is the value which was assigned.

#+BEGIN_SRC 
A ← 1/2 · 1/2;
#+END_SRC

*** Functions

A function is an expression that can be executed with different inputs.

#+BEGIN_SRC 
allEven: (S) → ∀(x ∈ S: x mod 2 = 0);
halfOfCircleArea: (r) → 1/2 · π · r ^ 2;

-- evaluate a function
allEven({1, 2, 3});
#+END_SRC

*** Conditionals

Functions also support conditionals.

#+BEGIN_SRC 
f: (x) →
  if x = 5: x ÷ 2
  otherwise: x · 2;
#+END_SRC


** List of operations

*** Operations for numbers/fractions

#+BEGIN_SRC 
-- addition
1 + 2

-- subtraction
3 - 1

-- multiplication
2 · 4

-- division
4 ÷ 2

-- modulo
4 mod 2

-- exponentation
2 ^ 4

-- floor
⌊1.1⌋

-- ceil
⌈1.4⌉

-- factorial
5!

-- negation
-5
#+END_SRC

*** Comparisons

#+BEGIN_SRC 
-- equal to
x = 2

-- unequal to
x ≠ 2

-- less than
x < 2

-- greater than
x > 2

-- less or equal than
x ≤ 2

-- greater or equal than
x ≥ 2
#+END_SRC

*** Logical symbols

#+BEGIN_SRC 
-- implication
x = 2 ⇒ x ^ 2 = 4

-- equivalence
x = y ⇔ y = x

-- negation
¬(x = 5)

-- conjunction
x < 4 ∧ x > 2 ∧ x = 3

-- disjunction
n ≥ 4 ∨ n ≤ 2 ⇔ n ≠ 3

-- exclusive disjunction (XOR)
(¬B) ⊕ A

-- universal quantification (in combination with sets)
∀(n ∈ S: n ^ 2 ≥ n)

-- existential quantification (in combination with sets)
∃(n ∈ S: n mod 2 = 0)

-- uniqueness quantification (exactly one element should fulfill the condition) (in combination with sets
∃!(n ∈ S: n + 5 = 2n)
#+END_SRC

*** Set operations

#+BEGIN_SRC 
-- union
A ∪ B

-- intersection
A ∩ B

-- set difference
U \ A 

-- subset
A ⊂ B

-- not a subset
A ⊄ B

-- subset or equal to
A ⊆ B

-- not a subset or equal to
A ⊈ B

-- superset
A ⊃ B

-- not a superset
A ⊅ B

-- superset or equal to
A ⊇ B

-- not a superset or equal to
A ⊉ B

-- cardinality
|A|
#+END_SRC
